{
    "$defs": {
        "AdamConfig": {
            "properties": {
                "amsgrad": {
                    "default": false,
                    "description": "Whether to use AMSGrad variant of Adam.",
                    "title": "Amsgrad",
                    "type": "boolean"
                },
                "betas": {
                    "default": [
                        0.9,
                        0.999
                    ],
                    "description": "Betas.",
                    "maxItems": 2,
                    "minItems": 2,
                    "prefixItems": [
                        {
                            "exclusiveMinimum": 0.0,
                            "type": "number"
                        },
                        {
                            "exclusiveMinimum": 0.0,
                            "type": "number"
                        }
                    ],
                    "title": "Betas",
                    "type": "array"
                },
                "eps": {
                    "default": 1e-08,
                    "description": "Epsilon.",
                    "minimum": 0.0,
                    "title": "Eps",
                    "type": "number"
                },
                "lr": {
                    "description": "Learning rate.",
                    "exclusiveMinimum": 0.0,
                    "title": "Lr",
                    "type": "number"
                },
                "name": {
                    "const": "Adam",
                    "default": "Adam",
                    "description": "name of the optimizer.",
                    "enum": [
                        "Adam"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "weight_decay": {
                    "default": 0.0,
                    "description": "Weight decay.",
                    "minimum": 0.0,
                    "title": "Weight Decay",
                    "type": "number"
                }
            },
            "required": [
                "lr"
            ],
            "title": "AdamConfig",
            "type": "object"
        },
        "AdamWConfig": {
            "properties": {
                "amsgrad": {
                    "default": false,
                    "description": "Whether to use AMSGrad variant of Adam.",
                    "title": "Amsgrad",
                    "type": "boolean"
                },
                "betas": {
                    "default": [
                        0.9,
                        0.999
                    ],
                    "description": "Betas.",
                    "maxItems": 2,
                    "minItems": 2,
                    "prefixItems": [
                        {
                            "exclusiveMinimum": 0.0,
                            "type": "number"
                        },
                        {
                            "exclusiveMinimum": 0.0,
                            "type": "number"
                        }
                    ],
                    "title": "Betas",
                    "type": "array"
                },
                "eps": {
                    "default": 1e-08,
                    "description": "Epsilon.",
                    "minimum": 0.0,
                    "title": "Eps",
                    "type": "number"
                },
                "lr": {
                    "description": "Learning rate.",
                    "exclusiveMinimum": 0.0,
                    "title": "Lr",
                    "type": "number"
                },
                "name": {
                    "const": "AdamW",
                    "default": "AdamW",
                    "description": "name of the optimizer.",
                    "enum": [
                        "AdamW"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "weight_decay": {
                    "default": 0.01,
                    "description": "Weight decay.",
                    "minimum": 0.0,
                    "title": "Weight Decay",
                    "type": "number"
                }
            },
            "required": [
                "lr"
            ],
            "title": "AdamWConfig",
            "type": "object"
        },
        "CosineAnnealingLRConfig": {
            "properties": {
                "T_max": {
                    "description": "Maximum number of iterations.",
                    "title": "T Max",
                    "type": "integer"
                },
                "eta_min": {
                    "default": 0,
                    "description": "Minimum learning rate.",
                    "title": "Eta Min",
                    "type": "number"
                },
                "last_epoch": {
                    "default": -1,
                    "description": "The index of last epoch.",
                    "title": "Last Epoch",
                    "type": "integer"
                },
                "type": {
                    "const": "CosineAnnealingLR",
                    "default": "CosineAnnealingLR",
                    "description": "Type of the learning rate scheduler.",
                    "enum": [
                        "CosineAnnealingLR"
                    ],
                    "title": "Type",
                    "type": "string"
                }
            },
            "required": [
                "T_max"
            ],
            "title": "CosineAnnealingLRConfig",
            "type": "object"
        },
        "DType": {
            "const": "float",
            "enum": [
                "float"
            ],
            "type": "string"
        },
        "EnergyPropertyConfig": {
            "properties": {
                "dtype": {
                    "$ref": "#/$defs/DType",
                    "default": "float",
                    "description": "The type of the property values."
                },
                "loss": {
                    "$ref": "#/$defs/LossConfig",
                    "description": "The loss function to use when training the model on this property."
                },
                "loss_coefficient": {
                    "default": 1.0,
                    "description": "The coefficient to apply to this property's loss function when training the model.",
                    "title": "Loss Coefficient",
                    "type": "number"
                },
                "name": {
                    "default": "energy",
                    "description": "The name of the property.\n\nThis is the key that will be used to access the property in the output of the model.",
                    "title": "Name",
                    "type": "string"
                },
                "type": {
                    "const": "energy",
                    "default": "energy",
                    "enum": [
                        "energy"
                    ],
                    "title": "Type",
                    "type": "string"
                }
            },
            "required": [
                "loss"
            ],
            "title": "EnergyPropertyConfig",
            "type": "object"
        },
        "ExponentialConfig": {
            "properties": {
                "gamma": {
                    "description": "Multiplicative factor of learning rate decay.",
                    "title": "Gamma",
                    "type": "number"
                },
                "type": {
                    "const": "ExponentialLR",
                    "default": "ExponentialLR",
                    "description": "Type of the learning rate scheduler.",
                    "enum": [
                        "ExponentialLR"
                    ],
                    "title": "Type",
                    "type": "string"
                }
            },
            "required": [
                "gamma"
            ],
            "title": "ExponentialConfig",
            "type": "object"
        },
        "ForcesPropertyConfig": {
            "properties": {
                "conservative": {
                    "description": "Whether the forces are energy conserving.\n\nThis is used by the backbone to decide the type of output head to use for\nthis property. Conservative force predictions are computed by taking the\nnegative gradient of the energy with respect to the atomic positions, whereas\nnon-conservative forces may be computed by other means.",
                    "title": "Conservative",
                    "type": "boolean"
                },
                "dtype": {
                    "$ref": "#/$defs/DType",
                    "default": "float",
                    "description": "The type of the property values."
                },
                "loss": {
                    "$ref": "#/$defs/LossConfig",
                    "description": "The loss function to use when training the model on this property."
                },
                "loss_coefficient": {
                    "default": 1.0,
                    "description": "The coefficient to apply to this property's loss function when training the model.",
                    "title": "Loss Coefficient",
                    "type": "number"
                },
                "name": {
                    "default": "forces",
                    "description": "The name of the property.\n\nThis is the key that will be used to access the property in the output of the model.",
                    "title": "Name",
                    "type": "string"
                },
                "type": {
                    "const": "forces",
                    "default": "forces",
                    "enum": [
                        "forces"
                    ],
                    "title": "Type",
                    "type": "string"
                }
            },
            "required": [
                "loss",
                "conservative"
            ],
            "title": "ForcesPropertyConfig",
            "type": "object"
        },
        "GraphPropertyConfig": {
            "properties": {
                "dtype": {
                    "$ref": "#/$defs/DType",
                    "description": "The type of the property values."
                },
                "loss": {
                    "$ref": "#/$defs/LossConfig",
                    "description": "The loss function to use when training the model on this property."
                },
                "loss_coefficient": {
                    "default": 1.0,
                    "description": "The coefficient to apply to this property's loss function when training the model.",
                    "title": "Loss Coefficient",
                    "type": "number"
                },
                "name": {
                    "description": "The name of the property.\n\nThis is the key that will be used to access the property in the output of the model.\n\nThis is also the key that will be used to access the property in the ASE Atoms object.",
                    "title": "Name",
                    "type": "string"
                },
                "reduction": {
                    "description": "The reduction to use for the output.\n- \"sum\": Sum the property values for all atoms in the system.\nThis is optimal for extensive properties (e.g. energy).\n- \"mean\": Take the mean of the property values for all atoms in the system.\nThis is optimal for intensive properties (e.g. density).\n- \"max\": Take the maximum of the property values for all atoms in the system.\nThis is optimal for properties like the `last phdos peak` of Matbench's phonons dataset.",
                    "enum": [
                        "mean",
                        "sum",
                        "max"
                    ],
                    "title": "Reduction",
                    "type": "string"
                },
                "type": {
                    "const": "graph_property",
                    "default": "graph_property",
                    "enum": [
                        "graph_property"
                    ],
                    "title": "Type",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "dtype",
                "loss",
                "reduction"
            ],
            "title": "GraphPropertyConfig",
            "type": "object"
        },
        "HuberLossConfig": {
            "properties": {
                "delta": {
                    "default": 1.0,
                    "description": "The threshold value for the Huber loss function.",
                    "title": "Delta",
                    "type": "number"
                },
                "name": {
                    "const": "huber",
                    "default": "huber",
                    "enum": [
                        "huber"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "reduction": {
                    "default": "mean",
                    "description": "How to reduce the loss values across the batch.\n\n- ``\"mean\"``: The mean of the loss values.\n- ``\"sum\"``: The sum of the loss values.",
                    "enum": [
                        "mean",
                        "sum"
                    ],
                    "title": "Reduction",
                    "type": "string"
                }
            },
            "title": "HuberLossConfig",
            "type": "object"
        },
        "L2MAELossConfig": {
            "properties": {
                "name": {
                    "const": "l2_mae",
                    "default": "l2_mae",
                    "enum": [
                        "l2_mae"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "reduction": {
                    "default": "mean",
                    "description": "How to reduce the loss values across the batch.\n\n- ``\"mean\"``: The mean of the loss values.\n- ``\"sum\"``: The sum of the loss values.",
                    "enum": [
                        "mean",
                        "sum"
                    ],
                    "title": "Reduction",
                    "type": "string"
                }
            },
            "title": "L2MAELossConfig",
            "type": "object"
        },
        "LRSchedulerConfig": {
            "discriminator": {
                "mapping": {
                    "CosineAnnealingLR": "#/$defs/CosineAnnealingLRConfig",
                    "ExponentialLR": "#/$defs/ExponentialConfig",
                    "MultiStepLR": "#/$defs/MultiStepLRConfig",
                    "ReduceLROnPlateau": "#/$defs/ReduceOnPlateauConfig",
                    "StepLR": "#/$defs/StepLRConfig"
                },
                "propertyName": "type"
            },
            "oneOf": [
                {
                    "$ref": "#/$defs/StepLRConfig"
                },
                {
                    "$ref": "#/$defs/MultiStepLRConfig"
                },
                {
                    "$ref": "#/$defs/ExponentialConfig"
                },
                {
                    "$ref": "#/$defs/ReduceOnPlateauConfig"
                },
                {
                    "$ref": "#/$defs/CosineAnnealingLRConfig"
                }
            ]
        },
        "LossConfig": {
            "discriminator": {
                "mapping": {
                    "huber": "#/$defs/HuberLossConfig",
                    "l2_mae": "#/$defs/L2MAELossConfig",
                    "mae": "#/$defs/MAELossConfig",
                    "mse": "#/$defs/MSELossConfig"
                },
                "propertyName": "name"
            },
            "oneOf": [
                {
                    "$ref": "#/$defs/MAELossConfig"
                },
                {
                    "$ref": "#/$defs/MSELossConfig"
                },
                {
                    "$ref": "#/$defs/HuberLossConfig"
                },
                {
                    "$ref": "#/$defs/L2MAELossConfig"
                }
            ]
        },
        "MAELossConfig": {
            "properties": {
                "name": {
                    "const": "mae",
                    "default": "mae",
                    "enum": [
                        "mae"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "reduction": {
                    "default": "mean",
                    "description": "How to reduce the loss values across the batch.\n\n- ``\"mean\"``: The mean of the loss values.\n- ``\"sum\"``: The sum of the loss values.",
                    "enum": [
                        "mean",
                        "sum"
                    ],
                    "title": "Reduction",
                    "type": "string"
                }
            },
            "title": "MAELossConfig",
            "type": "object"
        },
        "MSELossConfig": {
            "properties": {
                "name": {
                    "const": "mse",
                    "default": "mse",
                    "enum": [
                        "mse"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "reduction": {
                    "default": "mean",
                    "description": "How to reduce the loss values across the batch.\n\n- ``\"mean\"``: The mean of the loss values.\n- ``\"sum\"``: The sum of the loss values.",
                    "enum": [
                        "mean",
                        "sum"
                    ],
                    "title": "Reduction",
                    "type": "string"
                }
            },
            "title": "MSELossConfig",
            "type": "object"
        },
        "MeanStdNormalizerConfig": {
            "properties": {
                "mean": {
                    "description": "The mean of the property values.",
                    "title": "Mean",
                    "type": "number"
                },
                "std": {
                    "description": "The standard deviation of the property values.",
                    "title": "Std",
                    "type": "number"
                }
            },
            "required": [
                "mean",
                "std"
            ],
            "title": "MeanStdNormalizerConfig",
            "type": "object"
        },
        "MultiStepLRConfig": {
            "properties": {
                "gamma": {
                    "description": "Multiplicative factor of learning rate decay.",
                    "title": "Gamma",
                    "type": "number"
                },
                "milestones": {
                    "description": "List of epoch indices. Must be increasing.",
                    "items": {
                        "type": "integer"
                    },
                    "title": "Milestones",
                    "type": "array"
                },
                "type": {
                    "const": "MultiStepLR",
                    "default": "MultiStepLR",
                    "description": "Type of the learning rate scheduler.",
                    "enum": [
                        "MultiStepLR"
                    ],
                    "title": "Type",
                    "type": "string"
                }
            },
            "required": [
                "milestones",
                "gamma"
            ],
            "title": "MultiStepLRConfig",
            "type": "object"
        },
        "NormalizerConfig": {
            "anyOf": [
                {
                    "$ref": "#/$defs/MeanStdNormalizerConfig"
                },
                {
                    "$ref": "#/$defs/RMSNormalizerConfig"
                },
                {
                    "$ref": "#/$defs/PerAtomReferencingNormalizerConfig"
                }
            ]
        },
        "ORBSystemConfig": {
            "description": "Config controlling how to featurize a system of atoms.",
            "properties": {
                "max_num_neighbors": {
                    "description": "The maximum number of neighbours each node can send messages to.",
                    "title": "Max Num Neighbors",
                    "type": "integer"
                },
                "radius": {
                    "description": "The radius for edge construction.",
                    "title": "Radius",
                    "type": "number"
                }
            },
            "required": [
                "radius",
                "max_num_neighbors"
            ],
            "title": "ORBSystemConfig",
            "type": "object"
        },
        "OptimizerConfig": {
            "discriminator": {
                "mapping": {
                    "Adam": "#/$defs/AdamConfig",
                    "AdamW": "#/$defs/AdamWConfig",
                    "SGD": "#/$defs/SGDConfig"
                },
                "propertyName": "name"
            },
            "oneOf": [
                {
                    "$ref": "#/$defs/AdamConfig"
                },
                {
                    "$ref": "#/$defs/AdamWConfig"
                },
                {
                    "$ref": "#/$defs/SGDConfig"
                }
            ]
        },
        "PerAtomReferencingNormalizerConfig": {
            "properties": {
                "per_atom_references": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "type": "number"
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "type": "number"
                            },
                            "type": "array"
                        },
                        {
                            "format": "path",
                            "type": "string"
                        }
                    ],
                    "description": "The reference values for each element.\n\n- If a dictionary is provided, it maps atomic numbers to reference values\n- If a list is provided, it's a list of reference values indexed by atomic number\n- If a path is provided, it should point to a JSON file containing the references",
                    "title": "Per Atom References"
                }
            },
            "required": [
                "per_atom_references"
            ],
            "title": "PerAtomReferencingNormalizerConfig",
            "type": "object"
        },
        "PropertyConfig": {
            "discriminator": {
                "mapping": {
                    "energy": "#/$defs/EnergyPropertyConfig",
                    "forces": "#/$defs/ForcesPropertyConfig",
                    "graph_property": "#/$defs/GraphPropertyConfig",
                    "stresses": "#/$defs/StressesPropertyConfig"
                },
                "propertyName": "type"
            },
            "oneOf": [
                {
                    "$ref": "#/$defs/GraphPropertyConfig"
                },
                {
                    "$ref": "#/$defs/EnergyPropertyConfig"
                },
                {
                    "$ref": "#/$defs/ForcesPropertyConfig"
                },
                {
                    "$ref": "#/$defs/StressesPropertyConfig"
                }
            ]
        },
        "RMSNormalizerConfig": {
            "properties": {
                "rms": {
                    "description": "The root mean square of the property values.",
                    "title": "Rms",
                    "type": "number"
                }
            },
            "required": [
                "rms"
            ],
            "title": "RMSNormalizerConfig",
            "type": "object"
        },
        "ReduceOnPlateauConfig": {
            "properties": {
                "cooldown": {
                    "default": 0,
                    "description": "Number of epochs to wait before resuming normal operation.",
                    "title": "Cooldown",
                    "type": "integer"
                },
                "eps": {
                    "default": 1e-08,
                    "description": "Threshold for testing the new optimum.",
                    "title": "Eps",
                    "type": "number"
                },
                "factor": {
                    "description": "Factor by which the learning rate will be reduced.",
                    "title": "Factor",
                    "type": "number"
                },
                "min_lr": {
                    "default": 0,
                    "description": "A lower bound on the learning rate.",
                    "title": "Min Lr",
                    "type": "number"
                },
                "mode": {
                    "description": "One of {\"min\", \"max\"}. Determines when to reduce the learning rate.",
                    "title": "Mode",
                    "type": "string"
                },
                "patience": {
                    "description": "Number of epochs with no improvement after which learning rate will be reduced.",
                    "title": "Patience",
                    "type": "integer"
                },
                "threshold": {
                    "default": 0.0001,
                    "description": "Threshold for measuring the new optimum.",
                    "title": "Threshold",
                    "type": "number"
                },
                "threshold_mode": {
                    "default": "rel",
                    "description": "One of {\"rel\", \"abs\"}. Determines the threshold mode.",
                    "title": "Threshold Mode",
                    "type": "string"
                },
                "type": {
                    "const": "ReduceLROnPlateau",
                    "default": "ReduceLROnPlateau",
                    "description": "Type of the learning rate scheduler.",
                    "enum": [
                        "ReduceLROnPlateau"
                    ],
                    "title": "Type",
                    "type": "string"
                }
            },
            "required": [
                "mode",
                "factor",
                "patience"
            ],
            "title": "ReduceOnPlateauConfig",
            "type": "object"
        },
        "SGDConfig": {
            "properties": {
                "lr": {
                    "description": "Learning rate.",
                    "exclusiveMinimum": 0.0,
                    "title": "Lr",
                    "type": "number"
                },
                "momentum": {
                    "default": 0.0,
                    "description": "Momentum.",
                    "minimum": 0.0,
                    "title": "Momentum",
                    "type": "number"
                },
                "name": {
                    "const": "SGD",
                    "default": "SGD",
                    "description": "name of the optimizer.",
                    "enum": [
                        "SGD"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "nestrov": {
                    "default": false,
                    "description": "Whether to use nestrov.",
                    "title": "Nestrov",
                    "type": "boolean"
                },
                "weight_decay": {
                    "default": 0.0,
                    "description": "Weight decay.",
                    "minimum": 0.0,
                    "title": "Weight Decay",
                    "type": "number"
                }
            },
            "required": [
                "lr"
            ],
            "title": "SGDConfig",
            "type": "object"
        },
        "StepLRConfig": {
            "properties": {
                "gamma": {
                    "description": "Multiplicative factor of learning rate decay.",
                    "title": "Gamma",
                    "type": "number"
                },
                "step_size": {
                    "description": "Period of learning rate decay.",
                    "title": "Step Size",
                    "type": "integer"
                },
                "type": {
                    "const": "StepLR",
                    "default": "StepLR",
                    "description": "Type of the learning rate scheduler.",
                    "enum": [
                        "StepLR"
                    ],
                    "title": "Type",
                    "type": "string"
                }
            },
            "required": [
                "step_size",
                "gamma"
            ],
            "title": "StepLRConfig",
            "type": "object"
        },
        "StressesPropertyConfig": {
            "properties": {
                "conservative": {
                    "description": "Similar to the `conservative` parameter in `ForcesPropertyConfig`, this parameter\nspecifies whether the stresses should be computed in a conservative manner.",
                    "title": "Conservative",
                    "type": "boolean"
                },
                "dtype": {
                    "$ref": "#/$defs/DType",
                    "default": "float",
                    "description": "The type of the property values."
                },
                "loss": {
                    "$ref": "#/$defs/LossConfig",
                    "description": "The loss function to use when training the model on this property."
                },
                "loss_coefficient": {
                    "default": 1.0,
                    "description": "The coefficient to apply to this property's loss function when training the model.",
                    "title": "Loss Coefficient",
                    "type": "number"
                },
                "name": {
                    "default": "stresses",
                    "description": "The name of the property.\n\nThis is the key that will be used to access the property in the output of the model.",
                    "title": "Name",
                    "type": "string"
                },
                "type": {
                    "const": "stresses",
                    "default": "stresses",
                    "enum": [
                        "stresses"
                    ],
                    "title": "Type",
                    "type": "string"
                }
            },
            "required": [
                "loss",
                "conservative"
            ],
            "title": "StressesPropertyConfig",
            "type": "object"
        }
    },
    "properties": {
        "ignore_gpu_batch_transform_error": {
            "default": true,
            "description": "Whether to ignore data processing errors during training.",
            "title": "Ignore Gpu Batch Transform Error",
            "type": "boolean"
        },
        "lr_scheduler": {
            "anyOf": [
                {
                    "$ref": "#/$defs/LRSchedulerConfig"
                },
                {
                    "type": "null"
                }
            ],
            "default": null,
            "description": "Learning Rate Scheduler"
        },
        "name": {
            "const": "orb",
            "default": "orb",
            "description": "The type of the backbone.",
            "enum": [
                "orb"
            ],
            "title": "Name",
            "type": "string"
        },
        "normalizers": {
            "additionalProperties": {
                "items": {
                    "$ref": "#/$defs/NormalizerConfig"
                },
                "type": "array"
            },
            "default": {},
            "description": "Normalizers for the properties.\n\nAny property can be associated with multiple normalizers. This is useful\nfor cases where we want to normalize the same property in different ways.\nFor example, we may want to normalize the energy by subtracting\nthe atomic reference energies, as well as by mean and standard deviation\nnormalization.\n\nThe normalizers are applied in the order they are defined in the list.",
            "title": "Normalizers",
            "type": "object"
        },
        "optimizer": {
            "$ref": "#/$defs/OptimizerConfig",
            "description": "Optimizer."
        },
        "pretrained_model": {
            "description": "The name of the pretrained model to load.",
            "title": "Pretrained Model",
            "type": "string"
        },
        "properties": {
            "description": "Properties to predict.",
            "items": {
                "$ref": "#/$defs/PropertyConfig"
            },
            "title": "Properties",
            "type": "array"
        },
        "system": {
            "$ref": "#/$defs/ORBSystemConfig",
            "default": {
                "max_num_neighbors": 20,
                "radius": 10.0
            },
            "description": "The system configuration, controlling how to featurize a system of atoms."
        }
    },
    "required": [
        "properties",
        "optimizer",
        "pretrained_model"
    ],
    "title": "ORBBackboneConfig",
    "type": "object"
}