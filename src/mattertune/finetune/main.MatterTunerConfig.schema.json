{
  "$defs": {
    "AdamConfig": {
      "properties": {
        "lr": {
          "description": "Learning rate.",
          "exclusiveMinimum": 0.0,
          "title": "Lr",
          "type": "number"
        },
        "name": {
          "const": "Adam",
          "default": "Adam",
          "description": "Name of the optimizer.",
          "enum": [
            "Adam"
          ],
          "title": "Name",
          "type": "string"
        },
        "eps": {
          "default": 1e-08,
          "description": "Epsilon.",
          "minimum": 0.0,
          "title": "Eps",
          "type": "number"
        },
        "betas": {
          "default": [
            0.9,
            0.999
          ],
          "description": "Betas.",
          "maxItems": 2,
          "minItems": 2,
          "prefixItems": [
            {
              "exclusiveMinimum": 0.0,
              "type": "number"
            },
            {
              "exclusiveMinimum": 0.0,
              "type": "number"
            }
          ],
          "title": "Betas",
          "type": "array"
        },
        "weight_decay": {
          "default": 0.0,
          "description": "Weight decay.",
          "minimum": 0.0,
          "title": "Weight Decay",
          "type": "number"
        },
        "amsgrad": {
          "default": false,
          "description": "Whether to use AMSGrad variant of Adam.",
          "title": "Amsgrad",
          "type": "boolean"
        }
      },
      "required": [
        "lr"
      ],
      "title": "AdamConfig",
      "type": "object"
    },
    "AdamWConfig": {
      "properties": {
        "lr": {
          "description": "Learning rate.",
          "exclusiveMinimum": 0.0,
          "title": "Lr",
          "type": "number"
        },
        "name": {
          "const": "AdamW",
          "default": "AdamW",
          "description": "Name of the optimizer.",
          "enum": [
            "AdamW"
          ],
          "title": "Name",
          "type": "string"
        },
        "eps": {
          "default": 1e-08,
          "description": "Epsilon.",
          "minimum": 0.0,
          "title": "Eps",
          "type": "number"
        },
        "betas": {
          "default": [
            0.9,
            0.999
          ],
          "description": "Betas.",
          "maxItems": 2,
          "minItems": 2,
          "prefixItems": [
            {
              "exclusiveMinimum": 0.0,
              "type": "number"
            },
            {
              "exclusiveMinimum": 0.0,
              "type": "number"
            }
          ],
          "title": "Betas",
          "type": "array"
        },
        "weight_decay": {
          "default": 0.01,
          "description": "Weight decay.",
          "minimum": 0.0,
          "title": "Weight Decay",
          "type": "number"
        },
        "amsgrad": {
          "default": false,
          "description": "Whether to use AMSGrad variant of Adam.",
          "title": "Amsgrad",
          "type": "boolean"
        }
      },
      "required": [
        "lr"
      ],
      "title": "AdamWConfig",
      "type": "object"
    },
    "CachedPath": {
      "properties": {
        "uri": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "format": "path",
              "type": "string"
            }
          ],
          "description": "The origin of the cached path.\n\nThis can be a local path, a downloadable URL, an S3 URL, a GCS URL, or an Hugging Face Hub URL.",
          "title": "Uri"
        },
        "cache_dir": {
          "anyOf": [
            {
              "format": "path",
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The directory to cache the file in.\n\nIf not specified, the file will be cached in the default cache directory for `cached_path`.",
          "title": "Cache Dir"
        },
        "extract_archive": {
          "default": false,
          "description": "Whether to extract the archive after downloading it.",
          "title": "Extract Archive",
          "type": "boolean"
        },
        "force_extract": {
          "default": false,
          "description": "Whether to force extraction of the archive even if the extracted directory already exists.",
          "title": "Force Extract",
          "type": "boolean"
        },
        "quiet": {
          "default": false,
          "description": "Whether to suppress the progress bar.",
          "title": "Quiet",
          "type": "boolean"
        },
        "is_local": {
          "default": false,
          "description": "Whether the cached path is a local path. If set, this completely bypasses the caching mechanism,\nand simply returns the path as-is.",
          "title": "Is Local",
          "type": "boolean"
        }
      },
      "required": [
        "uri"
      ],
      "title": "CachedPath",
      "type": "object"
    },
    "CosineAnnealingLRConfig": {
      "properties": {
        "type": {
          "const": "CosineAnnealingLR",
          "default": "CosineAnnealingLR",
          "description": "Type of the learning rate scheduler.",
          "enum": [
            "CosineAnnealingLR"
          ],
          "title": "Type",
          "type": "string"
        },
        "T_max": {
          "description": "Maximum number of iterations.",
          "title": "T Max",
          "type": "integer"
        },
        "eta_min": {
          "default": 0,
          "description": "Minimum learning rate.",
          "title": "Eta Min",
          "type": "number"
        },
        "last_epoch": {
          "default": -1,
          "description": "The index of last epoch.",
          "title": "Last Epoch",
          "type": "integer"
        }
      },
      "required": [
        "T_max"
      ],
      "title": "CosineAnnealingLRConfig",
      "type": "object"
    },
    "CutoffsConfig": {
      "properties": {
        "main": {
          "title": "Main",
          "type": "number"
        },
        "aeaint": {
          "title": "Aeaint",
          "type": "number"
        },
        "qint": {
          "title": "Qint",
          "type": "number"
        },
        "aint": {
          "title": "Aint",
          "type": "number"
        }
      },
      "required": [
        "main",
        "aeaint",
        "qint",
        "aint"
      ],
      "title": "CutoffsConfig",
      "type": "object"
    },
    "EnergyPropertyConfig": {
      "properties": {
        "name": {
          "default": "energy",
          "description": "The name of the property.\nThis is the key that will be used to access the property in the output of the model.",
          "title": "Name",
          "type": "string"
        },
        "dtype": {
          "default": "float",
          "description": "The type of the property values.",
          "enum": [
            "int",
            "float"
          ],
          "title": "Dtype",
          "type": "string"
        },
        "loss": {
          "description": "The loss function to use when training the model on this property.",
          "discriminator": {
            "mapping": {
              "huber": "#/$defs/HuberLossConfig",
              "l2_mae": "#/$defs/L2MAELossConfig",
              "mae": "#/$defs/MAELossConfig",
              "mse": "#/$defs/MSELossConfig"
            },
            "propertyName": "name"
          },
          "oneOf": [
            {
              "$ref": "#/$defs/MAELossConfig"
            },
            {
              "$ref": "#/$defs/MSELossConfig"
            },
            {
              "$ref": "#/$defs/HuberLossConfig"
            },
            {
              "$ref": "#/$defs/L2MAELossConfig"
            }
          ],
          "title": "Loss"
        },
        "loss_coefficient": {
          "default": 1.0,
          "description": "The coefficient to apply to this property's loss function when training the model.",
          "title": "Loss Coefficient",
          "type": "number"
        },
        "type": {
          "const": "energy",
          "default": "energy",
          "enum": [
            "energy"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "required": [
        "loss"
      ],
      "title": "EnergyPropertyConfig",
      "type": "object"
    },
    "ExponentialConfig": {
      "properties": {
        "type": {
          "const": "ExponentialLR",
          "default": "ExponentialLR",
          "description": "Type of the learning rate scheduler.",
          "enum": [
            "ExponentialLR"
          ],
          "title": "Type",
          "type": "string"
        },
        "gamma": {
          "description": "Multiplicative factor of learning rate decay.",
          "title": "Gamma",
          "type": "number"
        }
      },
      "required": [
        "gamma"
      ],
      "title": "ExponentialConfig",
      "type": "object"
    },
    "ForcesPropertyConfig": {
      "properties": {
        "name": {
          "default": "forces",
          "description": "The name of the property.\nThis is the key that will be used to access the property in the output of the model.",
          "title": "Name",
          "type": "string"
        },
        "dtype": {
          "default": "float",
          "description": "The type of the property values.",
          "enum": [
            "int",
            "float"
          ],
          "title": "Dtype",
          "type": "string"
        },
        "loss": {
          "description": "The loss function to use when training the model on this property.",
          "discriminator": {
            "mapping": {
              "huber": "#/$defs/HuberLossConfig",
              "l2_mae": "#/$defs/L2MAELossConfig",
              "mae": "#/$defs/MAELossConfig",
              "mse": "#/$defs/MSELossConfig"
            },
            "propertyName": "name"
          },
          "oneOf": [
            {
              "$ref": "#/$defs/MAELossConfig"
            },
            {
              "$ref": "#/$defs/MSELossConfig"
            },
            {
              "$ref": "#/$defs/HuberLossConfig"
            },
            {
              "$ref": "#/$defs/L2MAELossConfig"
            }
          ],
          "title": "Loss"
        },
        "loss_coefficient": {
          "default": 1.0,
          "description": "The coefficient to apply to this property's loss function when training the model.",
          "title": "Loss Coefficient",
          "type": "number"
        },
        "type": {
          "const": "forces",
          "default": "forces",
          "enum": [
            "forces"
          ],
          "title": "Type",
          "type": "string"
        },
        "conservative": {
          "description": "Whether the forces are energy conserving.\nThis is used by the backbone to decide the type of output head to use for\n    this property. Conservative force predictions are computed by taking the\n    negative gradient of the energy with respect to the atomic positions, whereas\n    non-conservative forces may be computed by other means.",
          "title": "Conservative",
          "type": "boolean"
        }
      },
      "required": [
        "loss",
        "conservative"
      ],
      "title": "ForcesPropertyConfig",
      "type": "object"
    },
    "GraphComputerConfig": {
      "properties": {
        "pbc": {
          "description": "Whether to use periodic boundary conditions.",
          "title": "Pbc",
          "type": "boolean"
        },
        "cutoffs": {
          "allOf": [
            {
              "$ref": "#/$defs/CutoffsConfig"
            }
          ],
          "default": {
            "main": 12.0,
            "aeaint": 12.0,
            "qint": 12.0,
            "aint": 12.0
          },
          "description": "The cutoff for the radius graph."
        },
        "max_neighbors": {
          "allOf": [
            {
              "$ref": "#/$defs/MaxNeighborsConfig"
            }
          ],
          "default": {
            "main": 30,
            "aeaint": 20,
            "qint": 8,
            "aint": 1000
          },
          "description": "The maximum number of neighbors for the radius graph."
        },
        "per_graph_radius_graph": {
          "default": false,
          "description": "Whether to compute the radius graph per graph.",
          "title": "Per Graph Radius Graph",
          "type": "boolean"
        }
      },
      "required": [
        "pbc"
      ],
      "title": "GraphComputerConfig",
      "type": "object"
    },
    "GraphPropertyConfig": {
      "properties": {
        "name": {
          "description": "The name of the property.\nThis is the key that will be used to access the property in the output of the model.\nThis is also the key that will be used to access the property in the ASE Atoms object.",
          "title": "Name",
          "type": "string"
        },
        "dtype": {
          "description": "The type of the property values.",
          "enum": [
            "int",
            "float"
          ],
          "title": "Dtype",
          "type": "string"
        },
        "loss": {
          "description": "The loss function to use when training the model on this property.",
          "discriminator": {
            "mapping": {
              "huber": "#/$defs/HuberLossConfig",
              "l2_mae": "#/$defs/L2MAELossConfig",
              "mae": "#/$defs/MAELossConfig",
              "mse": "#/$defs/MSELossConfig"
            },
            "propertyName": "name"
          },
          "oneOf": [
            {
              "$ref": "#/$defs/MAELossConfig"
            },
            {
              "$ref": "#/$defs/MSELossConfig"
            },
            {
              "$ref": "#/$defs/HuberLossConfig"
            },
            {
              "$ref": "#/$defs/L2MAELossConfig"
            }
          ],
          "title": "Loss"
        },
        "loss_coefficient": {
          "default": 1.0,
          "description": "The coefficient to apply to this property's loss function when training the model.",
          "title": "Loss Coefficient",
          "type": "number"
        },
        "type": {
          "const": "graph_property",
          "default": "graph_property",
          "enum": [
            "graph_property"
          ],
          "title": "Type",
          "type": "string"
        }
      },
      "required": [
        "name",
        "dtype",
        "loss"
      ],
      "title": "GraphPropertyConfig",
      "type": "object"
    },
    "HuberLossConfig": {
      "properties": {
        "name": {
          "const": "huber",
          "default": "huber",
          "enum": [
            "huber"
          ],
          "title": "Name",
          "type": "string"
        },
        "delta": {
          "default": 1.0,
          "description": "The threshold value for the Huber loss function.",
          "title": "Delta",
          "type": "number"
        },
        "reduction": {
          "default": "mean",
          "description": "How to reduce the loss values across the batch.\n\n- ``\"mean\"``: The mean of the loss values.\n- ``\"sum\"``: The sum of the loss values.",
          "enum": [
            "mean",
            "sum"
          ],
          "title": "Reduction",
          "type": "string"
        }
      },
      "title": "HuberLossConfig",
      "type": "object"
    },
    "JMPBackboneConfig": {
      "properties": {
        "properties": {
          "type": "array",
          "items": {
            "description": "The configuration for the property.",
            "discriminator": {
              "mapping": {
                "energy": "#/$defs/EnergyPropertyConfig",
                "forces": "#/$defs/ForcesPropertyConfig",
                "graph_property": "#/$defs/GraphPropertyConfig",
                "stresses": "#/$defs/StressesPropertyConfig"
              },
              "propertyName": "type"
            },
            "oneOf": [
              {
                "$ref": "#/$defs/GraphPropertyConfig"
              },
              {
                "$ref": "#/$defs/EnergyPropertyConfig"
              },
              {
                "$ref": "#/$defs/ForcesPropertyConfig"
              },
              {
                "$ref": "#/$defs/StressesPropertyConfig"
              }
            ]
          },
          "description": "Properties to predict.",
          "title": "Properties"
        },
        "optimizer": {
          "description": "Optimizer.",
          "discriminator": {
            "mapping": {
              "Adam": "#/$defs/AdamConfig",
              "AdamW": "#/$defs/AdamWConfig",
              "SGD": "#/$defs/SGDConfig"
            },
            "propertyName": "name"
          },
          "oneOf": [
            {
              "$ref": "#/$defs/AdamConfig"
            },
            {
              "$ref": "#/$defs/AdamWConfig"
            },
            {
              "$ref": "#/$defs/SGDConfig"
            }
          ],
          "title": "Optimizer"
        },
        "lr_scheduler": {
          "anyOf": [
            {
              "discriminator": {
                "mapping": {
                  "CosineAnnealingLR": "#/$defs/CosineAnnealingLRConfig",
                  "ExponentialLR": "#/$defs/ExponentialConfig",
                  "MultiStepLR": "#/$defs/MultiStepLRConfig",
                  "ReduceLROnPlateau": "#/$defs/ReduceOnPlateauConfig",
                  "StepLR": "#/$defs/StepLRConfig"
                },
                "propertyName": "type"
              },
              "oneOf": [
                {
                  "$ref": "#/$defs/StepLRConfig"
                },
                {
                  "$ref": "#/$defs/MultiStepLRConfig"
                },
                {
                  "$ref": "#/$defs/ExponentialConfig"
                },
                {
                  "$ref": "#/$defs/ReduceOnPlateauConfig"
                },
                {
                  "$ref": "#/$defs/CosineAnnealingLRConfig"
                }
              ]
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Learning Rate Scheduler",
          "title": "Lr Scheduler"
        },
        "ignore_gpu_batch_transform_error": {
          "default": true,
          "description": "Whether to ignore data processing errors during training.",
          "title": "Ignore Gpu Batch Transform Error",
          "type": "boolean"
        },
        "type": {
          "const": "jmp",
          "default": "jmp",
          "description": "The type of the backbone.",
          "enum": [
            "jmp"
          ],
          "title": "Type",
          "type": "string"
        },
        "ckpt_path": {
          "anyOf": [
            {
              "format": "path",
              "type": "string"
            },
            {
              "$ref": "#/$defs/CachedPath"
            }
          ],
          "description": "The path to the pre-trained model checkpoint.",
          "title": "Ckpt Path"
        },
        "graph_computer": {
          "allOf": [
            {
              "$ref": "#/$defs/GraphComputerConfig"
            }
          ],
          "description": "The configuration for the graph computer."
        }
      },
      "required": [
        "properties",
        "optimizer",
        "ckpt_path",
        "graph_computer"
      ],
      "title": "JMPBackboneConfig",
      "type": "object"
    },
    "L2MAELossConfig": {
      "properties": {
        "name": {
          "const": "l2_mae",
          "default": "l2_mae",
          "enum": [
            "l2_mae"
          ],
          "title": "Name",
          "type": "string"
        },
        "reduction": {
          "default": "mean",
          "description": "How to reduce the loss values across the batch.\n\n- ``\"mean\"``: The mean of the loss values.\n- ``\"sum\"``: The sum of the loss values.",
          "enum": [
            "mean",
            "sum"
          ],
          "title": "Reduction",
          "type": "string"
        }
      },
      "title": "L2MAELossConfig",
      "type": "object"
    },
    "MAELossConfig": {
      "properties": {
        "name": {
          "const": "mae",
          "default": "mae",
          "enum": [
            "mae"
          ],
          "title": "Name",
          "type": "string"
        },
        "reduction": {
          "default": "mean",
          "description": "How to reduce the loss values across the batch.\n\n- ``\"mean\"``: The mean of the loss values.\n- ``\"sum\"``: The sum of the loss values.",
          "enum": [
            "mean",
            "sum"
          ],
          "title": "Reduction",
          "type": "string"
        }
      },
      "title": "MAELossConfig",
      "type": "object"
    },
    "MSELossConfig": {
      "properties": {
        "name": {
          "const": "mse",
          "default": "mse",
          "enum": [
            "mse"
          ],
          "title": "Name",
          "type": "string"
        },
        "reduction": {
          "default": "mean",
          "description": "How to reduce the loss values across the batch.\n\n- ``\"mean\"``: The mean of the loss values.\n- ``\"sum\"``: The sum of the loss values.",
          "enum": [
            "mean",
            "sum"
          ],
          "title": "Reduction",
          "type": "string"
        }
      },
      "title": "MSELossConfig",
      "type": "object"
    },
    "MaxNeighborsConfig": {
      "properties": {
        "main": {
          "title": "Main",
          "type": "integer"
        },
        "aeaint": {
          "title": "Aeaint",
          "type": "integer"
        },
        "qint": {
          "title": "Qint",
          "type": "integer"
        },
        "aint": {
          "title": "Aint",
          "type": "integer"
        }
      },
      "required": [
        "main",
        "aeaint",
        "qint",
        "aint"
      ],
      "title": "MaxNeighborsConfig",
      "type": "object"
    },
    "MultiStepLRConfig": {
      "properties": {
        "type": {
          "const": "MultiStepLR",
          "default": "MultiStepLR",
          "description": "Type of the learning rate scheduler.",
          "enum": [
            "MultiStepLR"
          ],
          "title": "Type",
          "type": "string"
        },
        "milestones": {
          "description": "List of epoch indices. Must be increasing.",
          "items": {
            "type": "integer"
          },
          "title": "Milestones",
          "type": "array"
        },
        "gamma": {
          "description": "Multiplicative factor of learning rate decay.",
          "title": "Gamma",
          "type": "number"
        }
      },
      "required": [
        "milestones",
        "gamma"
      ],
      "title": "MultiStepLRConfig",
      "type": "object"
    },
    "OMAT24DatasetConfig": {
      "properties": {
        "type": {
          "const": "omat24",
          "default": "omat24",
          "description": "Discriminator for the OMAT24 dataset.",
          "enum": [
            "omat24"
          ],
          "title": "Type",
          "type": "string"
        },
        "src": {
          "description": "The path to the OMAT24 dataset.",
          "format": "path",
          "title": "Src",
          "type": "string"
        }
      },
      "required": [
        "src"
      ],
      "title": "OMAT24DatasetConfig",
      "type": "object"
    },
    "PerSplitDataConfig": {
      "properties": {
        "train": {
          "description": "The configuration for the dataset.",
          "discriminator": {
            "mapping": {
              "omat24": "#/$defs/OMAT24DatasetConfig"
            },
            "propertyName": "type"
          },
          "oneOf": [
            {
              "$ref": "#/$defs/OMAT24DatasetConfig"
            }
          ],
          "title": "Train"
        },
        "validation": {
          "anyOf": [
            {
              "discriminator": {
                "mapping": {
                  "omat24": {
                    "allOf": [
                      {
                        "$ref": "#/$defs/OMAT24DatasetConfig"
                      }
                    ],
                    "description": "The configuration for the dataset."
                  }
                },
                "propertyName": "type"
              },
              "oneOf": [
                {
                  "allOf": [
                    {
                      "$ref": "#/$defs/OMAT24DatasetConfig"
                    }
                  ],
                  "description": "The configuration for the dataset."
                }
              ]
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The configuration for the validation data.",
          "title": "Validation"
        },
        "batch_size": {
          "description": "The batch size for the dataloaders.\nTODO: Add support for auto batch size tuning.",
          "title": "Batch Size",
          "type": "integer"
        },
        "num_workers": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "const": "auto",
              "enum": [
                "auto"
              ],
              "type": "string"
            }
          ],
          "default": "auto",
          "description": "The number of workers for the dataloaders.\n\nThis is the number of processes that generate batches in parallel.\nIf set to \"auto\", the number of workers will be automatically\n    set based on the number of available CPUs.\nSet to 0 to disable parallelism.\n\nTODO: Add support for auto-setting this value.",
          "title": "Num Workers"
        },
        "pin_memory": {
          "default": true,
          "description": "Whether to pin memory in the dataloaders.\n\nThis is useful for speeding up GPU data transfer.",
          "title": "Pin Memory",
          "type": "boolean"
        }
      },
      "required": [
        "train",
        "batch_size"
      ],
      "title": "PerSplitDataConfig",
      "type": "object"
    },
    "ReduceOnPlateauConfig": {
      "properties": {
        "type": {
          "const": "ReduceLROnPlateau",
          "default": "ReduceLROnPlateau",
          "description": "Type of the learning rate scheduler.",
          "enum": [
            "ReduceLROnPlateau"
          ],
          "title": "Type",
          "type": "string"
        },
        "mode": {
          "description": "One of {\"min\", \"max\"}. Determines when to reduce the learning rate.",
          "title": "Mode",
          "type": "string"
        },
        "factor": {
          "description": "Factor by which the learning rate will be reduced.",
          "title": "Factor",
          "type": "number"
        },
        "patience": {
          "description": "Number of epochs with no improvement after which learning rate will be reduced.",
          "title": "Patience",
          "type": "integer"
        },
        "threshold": {
          "default": 0.0001,
          "description": "Threshold for measuring the new optimum.",
          "title": "Threshold",
          "type": "number"
        },
        "threshold_mode": {
          "default": "rel",
          "description": "One of {\"rel\", \"abs\"}. Determines the threshold mode.",
          "title": "Threshold Mode",
          "type": "string"
        },
        "cooldown": {
          "default": 0,
          "description": "Number of epochs to wait before resuming normal operation.",
          "title": "Cooldown",
          "type": "integer"
        },
        "min_lr": {
          "default": 0,
          "description": "A lower bound on the learning rate.",
          "title": "Min Lr",
          "type": "number"
        },
        "eps": {
          "default": 1e-08,
          "description": "Threshold for testing the new optimum.",
          "title": "Eps",
          "type": "number"
        }
      },
      "required": [
        "mode",
        "factor",
        "patience"
      ],
      "title": "ReduceOnPlateauConfig",
      "type": "object"
    },
    "SGDConfig": {
      "properties": {
        "lr": {
          "description": "Learning rate.",
          "exclusiveMinimum": 0.0,
          "title": "Lr",
          "type": "number"
        },
        "name": {
          "const": "SGD",
          "default": "SGD",
          "description": "Name of the optimizer.",
          "enum": [
            "SGD"
          ],
          "title": "Name",
          "type": "string"
        },
        "momentum": {
          "default": 0.0,
          "description": "Momentum.",
          "minimum": 0.0,
          "title": "Momentum",
          "type": "number"
        },
        "weight_decay": {
          "default": 0.0,
          "description": "Weight decay.",
          "minimum": 0.0,
          "title": "Weight Decay",
          "type": "number"
        },
        "nestrov": {
          "default": false,
          "description": "Whether to use nestrov.",
          "title": "Nestrov",
          "type": "boolean"
        }
      },
      "required": [
        "lr"
      ],
      "title": "SGDConfig",
      "type": "object"
    },
    "StepLRConfig": {
      "properties": {
        "type": {
          "const": "StepLR",
          "default": "StepLR",
          "description": "Type of the learning rate scheduler.",
          "enum": [
            "StepLR"
          ],
          "title": "Type",
          "type": "string"
        },
        "step_size": {
          "description": "Period of learning rate decay.",
          "title": "Step Size",
          "type": "integer"
        },
        "gamma": {
          "description": "Multiplicative factor of learning rate decay.",
          "title": "Gamma",
          "type": "number"
        }
      },
      "required": [
        "step_size",
        "gamma"
      ],
      "title": "StepLRConfig",
      "type": "object"
    },
    "StressesPropertyConfig": {
      "properties": {
        "name": {
          "default": "stresses",
          "description": "The name of the property.\nThis is the key that will be used to access the property in the output of the model.",
          "title": "Name",
          "type": "string"
        },
        "dtype": {
          "default": "float",
          "description": "The type of the property values.",
          "enum": [
            "int",
            "float"
          ],
          "title": "Dtype",
          "type": "string"
        },
        "loss": {
          "description": "The loss function to use when training the model on this property.",
          "discriminator": {
            "mapping": {
              "huber": "#/$defs/HuberLossConfig",
              "l2_mae": "#/$defs/L2MAELossConfig",
              "mae": "#/$defs/MAELossConfig",
              "mse": "#/$defs/MSELossConfig"
            },
            "propertyName": "name"
          },
          "oneOf": [
            {
              "$ref": "#/$defs/MAELossConfig"
            },
            {
              "$ref": "#/$defs/MSELossConfig"
            },
            {
              "$ref": "#/$defs/HuberLossConfig"
            },
            {
              "$ref": "#/$defs/L2MAELossConfig"
            }
          ],
          "title": "Loss"
        },
        "loss_coefficient": {
          "default": 1.0,
          "description": "The coefficient to apply to this property's loss function when training the model.",
          "title": "Loss Coefficient",
          "type": "number"
        },
        "type": {
          "const": "stresses",
          "default": "stresses",
          "enum": [
            "stresses"
          ],
          "title": "Type",
          "type": "string"
        },
        "conservative": {
          "description": "Similar to the `conservative` parameter in `ForcesPropertyConfig`, this parameter\n    specifies whether the stresses should be computed in a conservative manner.",
          "title": "Conservative",
          "type": "boolean"
        }
      },
      "required": [
        "loss",
        "conservative"
      ],
      "title": "StressesPropertyConfig",
      "type": "object"
    }
  },
  "properties": {
    "data": {
      "allOf": [
        {
          "$ref": "#/$defs/PerSplitDataConfig"
        }
      ],
      "description": "The configuration for the data."
    },
    "model": {
      "description": "The configuration for the backbone.",
      "discriminator": {
        "mapping": {
          "jmp": "#/$defs/JMPBackboneConfig"
        },
        "propertyName": "type"
      },
      "oneOf": [
        {
          "$ref": "#/$defs/JMPBackboneConfig"
        }
      ],
      "title": "Model"
    },
    "lightning_trainer_kwargs": {
      "default": {},
      "description": "Keyword arguments for the Lightning Trainer.\nThis is for advanced users who want to customize the Lightning Trainer,\n    and is not recommended for beginners.",
      "title": "Lightning Trainer Kwargs",
      "type": "object"
    }
  },
  "required": [
    "data",
    "model"
  ],
  "title": "MatterTunerConfig",
  "type": "object"
}